[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "vcformer"
version = "0.0.1"
authors = [
  { name="VCFormer Developers", email="nabdennur@gmail.com" },
]
description = "Read and flatten VCF data into DataFrames."
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
keywords = [
    "vcf",
    "variant call format",
    "variant calling",
    "pandas",
    "polars",
    "dataframe",
    "genomics",
    "bioinformatics",
]
dependencies = [
    "bioframe",
    "pandas",
    "polars",
    "pysam",
]
[project.optional-dependencies]
dev = [
    "pytest",
    "pre-commit",
    "ruff"
]

[project.urls]
"Homepage" = "https://github.com/abdenlab/VCFormer"
"Bug Tracker" = "https://github.com/abdenlab/VCFormer/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.envs.docs]
dependencies = [
    "furo",
    "myst_parser>=0.13",
    "sphinx>=4.0",
    "sphinx-autobuild",
    "sphinx-book-theme>=0.1.0",
    "sphinx_copybutton",
]
[tool.hatch.envs.docs.scripts]
build = "sphinx-build docs docs/_build/html"
serve = "sphinx-autobuild docs docs/_build/html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black",
    "ruff",
]
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff --color {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "--quiet",
  "-r=a",
  "--import-mode=importlib",
]
testpaths = ["tests"]

[tool.hatch.envs.test]
dependencies = [
  "pytest",
]
[tool.hatch.envs.test.scripts]
all = "pytest {args:tests}"

[tool.mypy]
files = ["src", "tests"]
python_version = "3.11"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "vcformer.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "PD901", # Dataframe df
]
target-version = "py37"
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]

[tool.pylint]
py-version = "3.11"
ignore-paths= ["src/vcformer/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
