[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "vcformer"
version = "0.0.1"
authors = [
  { name="VCFormer Developers", email="nabdennur@gmail.com" },
]
description = "Read and flatten VCF data into DataFrames."
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
keywords = [
    "vcf",
    "variant call format",
    "variant calling",
    "pandas",
    "polars",
    "dataframe",
    "genomics",
    "bioinformatics",
]
dependencies = [
    "bioframe",
    "pandas",
    "polars",
    "pysam",
]
[project.optional-dependencies]
dev = [
    "pytest",
    "pre-commit"
]

[project.urls]
"Homepage" = "https://github.com/abdenlab/VCFormer"
"Bug Tracker" = "https://github.com/abdenlab/VCFormer/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black",
    "ruff",
]
[tool.hatch.envs.lint.scripts]
style = [
  "ruff {args:.}",
  "black --check --diff --color {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
]

[tool.ruff]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I001", # isort
  "UP",   # pyupgrade
]
[tool.ruff.per-file-ignores]
"__init__.py" = ["F403", "F405"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "--quiet",
  "-r=a",
  "--import-mode=importlib",
]
testpaths = ["tests"]

[tool.hatch.envs.test]
dependencies = [
  "pytest",
]
[tool.hatch.envs.test.scripts]
all = "pytest {args:tests}"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
exclude = []
